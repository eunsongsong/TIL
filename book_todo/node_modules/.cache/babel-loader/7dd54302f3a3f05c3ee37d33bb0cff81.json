{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\TIL\\\\book_todo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\TIL\\\\book_todo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\TIL\\\\book_todo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { observable, computed, action } from \"mobx\";\nimport TodoApiModel from \"../api/model/TodoApiModel\"; //1.Mobx Store 클래서 선언\n\nlet TodoStore = (_class = (_temp = class TodoStore {\n  constructor() {\n    _initializerDefineProperty(this, \"todos\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"todo\", _descriptor2, this);\n  }\n\n  //3.state 데이터 리턴 - @computed get로 함수 구현\n  get getTodo() {\n    return this.todo ? { ...this.todo\n    } : {};\n  }\n\n  get getTodos() {\n    return this.todos ? this.todos.slice() : [];\n  } //4.state 데이터 변경 @action 함수 구현\n\n\n  setTodoProp(name, value) {\n    this.todo = { ...this.todo,\n      [name]: value\n    };\n  }\n\n  addTodo(TodoApiModel) {\n    // this.todos.push(todo);\n    this.todoApi.todoCreate(TodoApiModel);\n  }\n\n  removeTodo(id) {\n    //todos에 id인 todo 삭제\n    this.todos = this.todos.filter(element => element.id !== id);\n    this.todo = {};\n  }\n\n  modifyTodo(todo) {\n    //todos에서 local todo.id와 같은 객체 수정\n    this.todos = this.todos.map(element => element.id === todo.id ? todo : element);\n    this.todo = {};\n  }\n\n  selectTodo(id) {\n    //todos에서 id가 같은 todo객체 변경\n    this.todo = this.todos.find(element => element.id === id);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"todos\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"todo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getTodo\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getTodos\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getTodos\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setTodoProp\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setTodoProp\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"removeTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"modifyTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"modifyTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"selectTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"selectTodo\"), _class.prototype)), _class); //5.객체 생성해서 export\n\nexport default new TodoStore();","map":{"version":3,"sources":["C:/TIL/book_todo/src/store/TodoStore.js"],"names":["observable","computed","action","TodoApiModel","TodoStore","getTodo","todo","getTodos","todos","slice","setTodoProp","name","value","addTodo","todoApi","todoCreate","removeTodo","id","filter","element","modifyTodo","map","selectTodo","find"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,QAA6C,MAA7C;AACA,OAAOC,YAAP,MAAyB,2BAAzB,C,CAEA;;IACMC,S,sBAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA;;AAAA;AAAA;;AAQd;AACA,MACIC,OADJ,GACc;AACZ,WAAO,KAAKC,IAAL,GAAY,EAAE,GAAG,KAAKA;AAAV,KAAZ,GAA+B,EAAtC;AACD;;AAED,MACIC,QADJ,GACe;AACb,WAAO,KAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,KAAX,EAAb,GAAkC,EAAzC;AACD,GAjBa,CAmBd;;;AAEAC,EAAAA,WADA,CACYC,IADZ,EACkBC,KADlB,EACyB;AACvB,SAAKN,IAAL,GAAY,EACV,GAAG,KAAKA,IADE;AAEV,OAACK,IAAD,GAAQC;AAFE,KAAZ;AAID;;AAGDC,EAAAA,OADA,CACQV,YADR,EACsB;AACpB;AACA,SAAKW,OAAL,CAAaC,UAAb,CAAwBZ,YAAxB;AACD;;AAGDa,EAAAA,UADA,CACWC,EADX,EACe;AACb;AACA,SAAKT,KAAL,GAAa,KAAKA,KAAL,CAAWU,MAAX,CAAmBC,OAAD,IAAaA,OAAO,CAACF,EAAR,KAAeA,EAA9C,CAAb;AACA,SAAKX,IAAL,GAAY,EAAZ;AACD;;AAGDc,EAAAA,UADA,CACWd,IADX,EACiB;AACf;AACA,SAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWa,GAAX,CAAgBF,OAAD,IAC1BA,OAAO,CAACF,EAAR,KAAeX,IAAI,CAACW,EAApB,GAAyBX,IAAzB,GAAgCa,OADrB,CAAb;AAGA,SAAKb,IAAL,GAAY,EAAZ;AACD;;AAGDgB,EAAAA,UADA,CACWL,EADX,EACe;AACb;AACA,SAAKX,IAAL,GAAY,KAAKE,KAAL,CAAWe,IAAX,CAAiBJ,OAAD,IAAaA,OAAO,CAACF,EAAR,KAAeA,EAA5C,CAAZ;AACD;;AAtDa,C,+EAEbjB,U;;;;;WACO,E;;wEAEPA,U;;;;;WACM,E;;4DAGNC,Q,6IAKAA,Q,iJAMAC,M,gJAQAA,M,+IAMAA,M,kJAOAA,M,kJASAA,M,iGAOH;;AACA,eAAe,IAAIE,SAAJ,EAAf","sourcesContent":["import { observable, computed, action } from \"mobx\";\r\nimport TodoApiModel from \"../api/model/TodoApiModel\";\r\n\r\n//1.Mobx Store 클래서 선언\r\nclass TodoStore {\r\n  //2.관리해야하는 state객체 @observable 선언 및 초기화\r\n  @observable\r\n  todos = [];\r\n\r\n  @observable\r\n  todo = {};\r\n\r\n  //3.state 데이터 리턴 - @computed get로 함수 구현\r\n  @computed\r\n  get getTodo() {\r\n    return this.todo ? { ...this.todo } : {};\r\n  }\r\n\r\n  @computed\r\n  get getTodos() {\r\n    return this.todos ? this.todos.slice() : [];\r\n  }\r\n\r\n  //4.state 데이터 변경 @action 함수 구현\r\n  @action\r\n  setTodoProp(name, value) {\r\n    this.todo = {\r\n      ...this.todo,\r\n      [name]: value,\r\n    };\r\n  }\r\n\r\n  @action\r\n  addTodo(TodoApiModel) {\r\n    // this.todos.push(todo);\r\n    this.todoApi.todoCreate(TodoApiModel);\r\n  }\r\n\r\n  @action\r\n  removeTodo(id) {\r\n    //todos에 id인 todo 삭제\r\n    this.todos = this.todos.filter((element) => element.id !== id);\r\n    this.todo = {};\r\n  }\r\n\r\n  @action\r\n  modifyTodo(todo) {\r\n    //todos에서 local todo.id와 같은 객체 수정\r\n    this.todos = this.todos.map((element) =>\r\n      element.id === todo.id ? todo : element\r\n    );\r\n    this.todo = {};\r\n  }\r\n\r\n  @action\r\n  selectTodo(id) {\r\n    //todos에서 id가 같은 todo객체 변경\r\n    this.todo = this.todos.find((element) => element.id === id);\r\n  }\r\n}\r\n\r\n//5.객체 생성해서 export\r\nexport default new TodoStore();\r\n"]},"metadata":{},"sourceType":"module"}