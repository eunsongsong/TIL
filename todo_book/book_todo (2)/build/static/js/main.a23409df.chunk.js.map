{"version":3,"sources":["view/BookItemView.js","view/BookListView.js","container/BookListContainer.js","view/BookDetailsView.js","container/BookDetailsContainer.js","view/menu/BookMain.js","view/TodoEditFormView.js","IDGenerator.js","container/TodoEditContainer.js","view/TodoListView.js","container/TodoListContainer.js","view/menu/TodoMain.js","App.js","serviceWorker.js","store/TodoStore.js","api/BookApi.js","store/BookStore.js","index.js"],"names":["BookItemView","this","props","book","onSelect","Item","onClick","Image","size","src","imgUrl","Content","Header","as","title","Meta","className","price","Description","author","Component","BookListView","books","map","BookListContainer","inject","observer","bookStore","select","bookList","_books","BookDetailsView","Card","wrapped","ui","publisher","introduce","extra","BookDetailsContainer","_book","BookMain","Grid","columns","divided","Column","TodoEditFormView","todo","onSetTodoProp","onAddTodo","onRemoveTodo","onModifyTodo","Form","Group","widths","Input","fluid","label","placeholder","value","onChange","e","target","Field","showTimeSelect","selected","date","dateFormat","timeFormat","timeIntervals","valueOf","Button","primary","PureComponent","generateId","length","chars","split","Math","floor","random","str","i","TodoEditContainer","name","TodoStore","setTodoProp","id","addTodo","removeTodo","modifyTodo","TodoListView","todos","onSelectTodo","Table","celled","Row","HeaderCell","Body","Array","isArray","key","Cell","moment","format","TodoListContainer","selectTodo","console","log","getTodos","TodoMain","textAlign","App","state","activeItem","handleItemClick","setState","Menu","pointing","secondary","active","position","Segment","Boolean","window","location","hostname","match","push","filter","element","find","slice","observable","computed","action","BookApi","URL","axios","get","then","response","data","catch","error","bookApi","ReactDOM","render","BookStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a23409df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Item } from 'semantic-ui-react';\r\n\r\nclass BookItemView extends Component {\r\n    render() {\r\n        const { book, onSelect } = this.props;\r\n        return (\r\n            <div>\r\n                <Item onClick={() => { onSelect(book) }}>\r\n                    <Item.Image size='small' src={book.imgUrl} />\r\n                    <Item.Content>\r\n                        <Item.Header as='a'>{book.title}</Item.Header>\r\n                        <Item.Meta>\r\n                            <span className='price'>{book.price}</span>\r\n                        </Item.Meta>\r\n                        <Item.Description>\r\n                            <p>{book.author}</p>\r\n                        </Item.Description>\r\n                    </Item.Content>\r\n                </Item>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookItemView;","import React, { Component } from 'react';\r\nimport BookItemView from './BookItemView';\r\n\r\nclass BookListView extends Component {\r\n    render() {\r\n        const { books, onSelect } = this.props;\r\n        const bookList = books.map(book => {\r\n            return (\r\n                <BookItemView book={book} onSelect={onSelect} />\r\n            )\r\n        });\r\n\r\n        return (\r\n            bookList \r\n        );\r\n    }\r\n}\r\n\r\nexport default BookListView;","import React, { Component } from 'react';\r\nimport BookListView from '../view/BookListView';\r\nimport { observer, inject } from 'mobx-react';\r\n\r\n@inject('bookStore')\r\n@observer\r\nclass BookListContainer extends Component {\r\n\r\n    componentDidMount(){\r\n        const {bookStore} = this.props;\r\n        if( bookStore){\r\n          bookStore.bookList();\r\n      }\r\n    }\r\n\r\n    onSelect = (book) => {\r\n        const { bookStore } = this.props;\r\n        bookStore.select(book);\r\n    }\r\n\r\n    render() {\r\n        const { bookStore } = this.props;\r\n\r\n        return (\r\n            <BookListView books={bookStore._books} onSelect={this.onSelect} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookListContainer;","import React, { Component } from 'react';\r\nimport { Card, Image } from 'semantic-ui-react'\r\n\r\nclass BookDetailsView extends Component {\r\n    render() {\r\n        const { book } = this.props;\r\n\r\n        return (\r\n            <Card>\r\n                <Image src={book.imgUrl} wrapped ui={false} />\r\n                <Card.Content>\r\n                    <Card.Header>{book.title}</Card.Header>\r\n                <Card.Meta>\r\n                        <span className='date'>{book.author} &nbsp; {book.publisher}</span><br></br>\r\n                        <span className='date'>{book.price}</span>\r\n                </Card.Meta>\r\n                <Card.Description>\r\n                        {book.introduce}\r\n                </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookDetailsView;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport BookDetailsView from '../view/BookDetailsView';\r\n\r\n@inject('bookStore')\r\n@observer\r\nclass BookDetailsContainer extends Component {\r\n    render() {\r\n        const { bookStore } = this.props;\r\n\r\n        return (\r\n            <BookDetailsView book={bookStore._book} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookDetailsContainer;","import React from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport BookListContainer from \"../../container/BookListContainer\";\r\nimport BookDetailsContainer from \"../../container/BookDetailsContainer\";\r\n\r\nfunction BookMain() {\r\n  return (\r\n    <Grid columns={2} divided>\r\n      <Grid.Column>\r\n        <BookListContainer />\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <BookDetailsContainer />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default BookMain;\r\n","import React, { PureComponent } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass TodoEditFormView extends PureComponent {\n  //\n \n  render() {\n    //\n    const {\n      todo,\n      onSetTodoProp,\n      onAddTodo,\n      onRemoveTodo,\n      onModifyTodo,\n    } = this.props;\n\n    return (\n      <Form>\n        <Form.Group widths=\"equal\">\n          <Form.Input\n            fluid\n            label=\"Title\"\n            placeholder=\"Title\"\n            value={todo && todo.title ? todo.title : \"\"}\n            onChange={(e) => onSetTodoProp(\"title\", e.target.value)}\n          />\n          <Form.Field>\n            <label>Date</label>\n            <DatePicker\n              showTimeSelect\n              selected={todo && todo.date ? todo.date : null}\n              dateFormat=\"yyyy-MM-dd hh:mm\"\n              timeFormat=\"hh:mm\"\n              timeIntervals={15}\n              onChange={(date) => onSetTodoProp(\"date\", date.valueOf())}\n            />\n          </Form.Field>\n        </Form.Group>\n        <Button primary onClick={onAddTodo}>\n          Add\n        </Button>\n        <Button primary onClick={onRemoveTodo}>\n          Remove\n        </Button>\n        <Button primary onClick={onModifyTodo}>\n          Modify\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default TodoEditFormView;\n","\nfunction generateId(length) {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\n\n    if (! length) {\n        length = Math.floor(Math.random() * chars.length);\n    }\n\n    var str = '';\n    for (var i = 0; i < length; i++) {\n        str += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return str;\n}\n\nexport default generateId;\n\nexport {\n    generateId,\n}","import React, { Component } from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport TodoEditFormView from \"../view/TodoEditFormView\";\r\nimport generateId from \"../IDGenerator\";\r\n\r\n@inject(\"TodoStore\")\r\n@observer\r\nclass TodoEditContainer extends Component {\r\n  onSetTodoProp = (name, value) => {\r\n    //TodoStore의 setTodoProp(name, value) 호출\r\n    //const {TodoStore} = this.props;\r\n    this.props.TodoStore.setTodoProp(name, value);\r\n  };\r\n\r\n  onAddTodo = () => {\r\n    //TodoStore의 addTodo(todo) 호출\r\n    let todo = this.props.TodoStore.todo;\r\n    todo = { ...todo, id: generateId(5) };\r\n    this.props.TodoStore.addTodo(todo);\r\n  };\r\n\r\n  onRemoveTodo = () => {\r\n    let todo = this.props.TodoStore.todo;\r\n    this.props.TodoStore.removeTodo(todo.id);\r\n  };\r\n\r\n  onModifyTodo = () => {\r\n    let todo = this.props.TodoStore.todo;\r\n    this.props.TodoStore.modifyTodo(todo);\r\n  };\r\n\r\n  render() {\r\n    const { todo } = this.props.TodoStore;\r\n    // const todo = this.props.TodoStore; //todo->TodoStore\r\n    return (\r\n      <TodoEditFormView\r\n        todo={todo}\r\n        onSetTodoProp={this.onSetTodoProp}\r\n        onAddTodo={this.onAddTodo}\r\n        onRemoveTodo={this.onRemoveTodo}\r\n        onModifyTodo={this.onModifyTodo}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEditContainer;\r\n","import React, { PureComponent } from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nclass TodoListView extends PureComponent {\n  //\n  render() {\n    //\n    const { todos, onSelectTodo } = this.props;\n\n    return (\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Title</Table.HeaderCell>\n            <Table.HeaderCell>Date</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {Array.isArray(todos) && todos.length ? (\n            todos.map((todo) => {\n              return (\n                <Table.Row key={todo.id} onClick={() => onSelectTodo(todo.id)}>\n                  <Table.Cell>{todo.title}</Table.Cell>\n                  <Table.Cell>\n                    {moment(todo.date).format(\"YYYY-MM-DD HH:mm\")}\n                  </Table.Cell>\n                </Table.Row>\n              );\n            })\n          ) : (\n            <Table.Row>\n              <Table.Cell>Empty</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    );\n  }\n}\n\nexport default TodoListView;\n","import React, { Component } from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport TodoListView from \"../view/TodoListView\";\r\n\r\n@inject(\"TodoStore\")\r\n@observer\r\nclass TodoListContainer extends Component {\r\n  \r\n  componentDidMount(){\r\n      console.log(\"todolistContainer: \"); \r\n   }\r\n\r\n  onSelectTodo = (id) => {\r\n    this.props.TodoStore.selectTodo(id);\r\n  };\r\n\r\n  render() {\r\n    const todos = this.props.TodoStore.getTodos;\r\n    return <TodoListView todos={todos} onSelectTodo={this.onSelectTodo} />;\r\n  }\r\n}\r\n\r\nexport default TodoListContainer;\r\n","import React from \"react\";\r\nimport { Grid, Header } from \"semantic-ui-react\";\r\nimport TodoEditContainer from \"../../container/TodoEditContainer\";\r\nimport TodoListContainer from \"../../container/TodoListContainer\";\r\n\r\nfunction TodoMain() {\r\n  return (\r\n    <Grid columns={1}>\r\n      <Grid.Row>\r\n        <Grid.Column textAlign=\"center\">\r\n          <Header as=\"h1\">일정관리</Header>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        <Grid.Column>\r\n          <TodoEditContainer />\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        <Grid.Column>\r\n          <TodoListContainer />\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default TodoMain;\r\n","import React from \"react\";\nimport { Menu, Segment } from \"semantic-ui-react\";\nimport BookMain from \"./view/menu/BookMain\";\nimport TodoMain from \"./view/menu/TodoMain\";\nimport { observer } from \"mobx-react\";\nimport { Component } from \"react\";\n\n@observer\nclass App extends Component {\n  state = { activeItem: \"home\" };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const activeItem = this.state.activeItem;\n    return (\n      <div>\n        <Menu pointing secondary>\n          <Menu.Item\n            name=\"home\"\n            active={activeItem === \"home\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name=\"book\"\n            active={activeItem === \"book\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name=\"todo\"\n            active={activeItem === \"todo\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Menu position=\"right\">\n            <Menu.Item\n              name=\"login\"\n              active={activeItem === \"login\"}\n              onClick={this.handleItemClick}\n            />\n          </Menu.Menu>\n        </Menu>\n\n        <Segment>\n            {activeItem === \"home\" && <h1>WELLCOME!</h1>}\n            {activeItem === \"book\" && <BookMain/>}\n            {activeItem === \"todo\" && <TodoMain/>}\n            {activeItem === \"login\" && <h1>로그인</h1>}        \n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, computed, action } from \"mobx\";\r\n\r\n//1.Mobx Store 클래서 선언\r\nclass TodoStore {\r\n  //2.관리해야하는 state객체 @observable 선언 및 초기화\r\n  @observable\r\n  todos = [];\r\n\r\n  @observable\r\n  todo = {};\r\n\r\n  //3.state 데이터 리턴 - @computed get로 함수 구현\r\n  @computed\r\n  get getTodo() {\r\n    return this.todo ? { ...this.todo } : {};\r\n  }\r\n\r\n  @computed\r\n  get getTodos() {\r\n    return this.todos ? this.todos.slice() : [];\r\n  }\r\n\r\n  //4.state 데이터 변경 @action 함수 구현\r\n  @action\r\n  setTodoProp(name, value) {\r\n    this.todo = {\r\n      ...this.todo,\r\n      [name]: value,\r\n    };\r\n  }\r\n\r\n  @action\r\n  addTodo(todo) {\r\n    this.todos.push(todo);\r\n  }\r\n\r\n  @action\r\n  removeTodo(id) {\r\n    //todos에 id인 todo 삭제\r\n    this.todos = this.todos.filter((element) => element.id !== id);\r\n    this.todo = {};\r\n  }\r\n\r\n  @action\r\n  modifyTodo(todo) {\r\n    //todos에서 local todo.id와 같은 객체 수정\r\n    this.todos = this.todos.map((element) =>\r\n      element.id === todo.id ? todo : element\r\n    );\r\n    this.todo = {};\r\n  }\r\n\r\n  @action\r\n  selectTodo(id) {\r\n    //todos에서 id가 같은 todo객체 변경\r\n    this.todo = this.todos.find((element) => element.id === id);\r\n  }\r\n}\r\n\r\n//5.객체 생성해서 export\r\nexport default new TodoStore();\r\n","import axios from 'axios';\r\n//import request from './cors';\r\n//\r\n\r\nclass BookApi{\r\n    URL=\"http://localhost:9000/api/books\";\r\n\r\n    bookList(){\r\n        axios.get(this.URL)\r\n             .then((response)=>{return response.data})\r\n             .catch((error)=>console.log(error));\r\n    }\r\n\r\n    // bookDetail(ISBN) : URL/ISBN Get  : Book\r\n\r\n    // bookCreate(BookApiModel) : URL  POST  \r\n\r\n    // bookModify(BookApiModel) : URL PUT\r\n\r\n    // bookDelete(ISBN) : URL/ISBN Delete\r\n\r\n    // search(searchType, keyword): URL/searchType/keyword Get :Book[]\r\n}\r\n\r\nexport default BookApi;\r\n","import { observable, computed, action } from 'mobx';\r\nimport BookApi from '../api/BookApi';\r\n\r\nclass BookStore {\r\n\r\n    bookApi=new BookApi();\r\n\r\n    @observable books = [];  //BookApi- bookList()\r\n    @observable book = null; //BookApi- bookDetail(ISBN)\r\n\r\n    \r\n    @computed get _book() {\r\n        return this.book ? { ...this.book } : {};\r\n    }\r\n\r\n    @computed get _books() {\r\n        return this.books ? this.books.slice() : [];\r\n    }\r\n\r\n    @action select = (book) => {\r\n        this.book = book;\r\n    }\r\n\r\n    @action\r\n    async bookList(){\r\n        this.books = await this.bookApi.bookList();\r\n    }\r\n}\r\n\r\nexport default new BookStore();","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"mobx-react\";\nimport TodoStore from \"./store/TodoStore\";\nimport BookStore from \"./store/BookStore\";\n\nReactDOM.render(\n  <Provider TodoStore={TodoStore} bookStore={BookStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}